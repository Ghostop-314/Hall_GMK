import { GoogleSheetsResponse, HallData, LocationConfig } from '../types';

const API_KEY = 'AIzaSyCAWlja4NXegn8bb2kpkYHzPzCFWZcKiu0';

const LOCATIONS: Record<'Tathawade' | 'Ravet', LocationConfig> = {
    Tathawade: {
        sheetId: '11ayCtpamMHMyPsJustw7XjUCqLKRhXAzPHwJoeXj8vc',
        halls: [
            {
                name: 'GMK Banquets',
                morningRange: 'B2:B31',
                eveningRange: 'C2:C31'
            },
            {
                name: 'Lawn',
                morningRange: 'B34:B63',
                eveningRange: 'C34:C63'
            }
        ]
    },
    Ravet: {
        sheetId: '1bz2OdYudngOhKu3CT34VhtWY0-WYg61YGFCavWMy7ms',
        halls: [
            {
                name: 'GMK Banquets',
                morningRange: 'B2:B31',
                eveningRange: 'C2:C31'
            },
            {
                name: 'Madhura Banquet',
                morningRange: 'B34:B63',
                eveningRange: 'C34:C63'
            }
        ]
    }
};

export const formatDate = (date: Date): string => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
};

export const fetchHallData = async (selectedDate: Date): Promise<HallData[]> => {
    try {
        console.log('Fetching data for date:', formatDate(selectedDate));
        const allResults: HallData[] = [];

        const locationPromises = Object.entries(LOCATIONS).map(async ([location, locationConfig]) => {
            for (const hall of locationConfig.halls) {
                try {
                    const morningUrl = `https://sheets.googleapis.com/v4/spreadsheets/${locationConfig.sheetId}/values/${hall.morningRange}?key=${API_KEY}&alt=json`;
                    const eveningUrl = `https://sheets.googleapis.com/v4/spreadsheets/${locationConfig.sheetId}/values/${hall.eveningRange}?key=${API_KEY}&alt=json`;

                    const [morningResponse, eveningResponse] = await Promise.all([
                        fetch(morningUrl),
                        fetch(eveningUrl)
                    ]);

                    if (!morningResponse.ok || !eveningResponse.ok) {
                        console.error('API request failed for', location, hall.name);
                        return;
                    }

                    const morningData = await morningResponse.json();
                    const eveningData = await eveningResponse.json();

                    const dayOfMonth = selectedDate.getDate();
                    const rowIndex = dayOfMonth - 1;

                    if (morningData.values?.[rowIndex]?.[0] === 'Yes') {
                        allResults.push({
                            date: formatDate(selectedDate),
                            location: location as 'Tathawade' | 'Ravet',
                            hallName: hall.name,
                            timeSlot: 'Morning',
                            status: 'Available'
                        });
                    }

                    if (eveningData.values?.[rowIndex]?.[0] === 'Yes') {
                        allResults.push({
                            date: formatDate(selectedDate),
                            location: location as 'Tathawade' | 'Ravet',
                            hallName: hall.name,
                            timeSlot: 'Evening',
                            status: 'Available'
                        });
                    }
                } catch (error) {
                    console.error(`Error fetching data for ${location} - ${hall.name}:`, error);
                }
            }
        });

        await Promise.all(locationPromises);
        return allResults;
    } catch (error) {
        console.error('Error fetching hall data:', error);
        if (error instanceof Error) {
            console.error('Error details:', {
                message: error.message,
                name: error.name,
                stack: error.stack
            });
        }
        return [];
    }
};
